name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # 使用统一的requirements.txt
        pip install -r requirements.txt
        # 安装开发和测试依赖
        pip install pytest pytest-cov flake8 black isort
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff .
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
    
    - name: Run tests with pytest
      run: |
        pytest tests/ --cov=core --cov=microservices --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    # 构建基础镜像
    - name: Build and push base image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.base
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    # 构建Agent-Planner
    - name: Build and push agent-planner
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./microservices/agent-planner/Dockerfile.agi
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-agent-planner:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base:${{ github.sha }}
    
    # 构建Agent-Executor
    - name: Build and push agent-executor
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./microservices/agent-executor/Dockerfile.agi
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-agent-executor:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base:${{ github.sha }}

  integration-test:
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
    
    - name: Create test environment file
      run: |
        cat > .env << EOF
        REDIS_HOST=agi-redis-lb
        REDIS_PORT=6379
        TAVILY_API_KEY=test_key
        OPENAI_API_KEY=test_key
        LOG_LEVEL=INFO
        EOF
    
    - name: Start services
      run: |
        docker-compose up -d
        sleep 30  # Wait for services to start
    
    - name: Run health checks
      run: |
        # Wait for services to be healthy
        timeout 300 bash -c 'until curl -f http://localhost:8300/health; do sleep 5; done'
        timeout 300 bash -c 'until curl -f http://localhost:8400/health; do sleep 5; done'
    
    - name: Run integration tests
      run: |
        python scripts/start_multi_agent_task.py "Integration test: system health check"
        sleep 10
        docker-compose logs
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v
        docker system prune -f

  deploy:
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deployment step would go here"
        echo "This could include:"
        echo "- Updating Kubernetes manifests"
        echo "- Triggering deployment pipeline"
        echo "- Notifying deployment status"

  release:
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Create release artifacts
      run: |
        mkdir -p release
        cp docker-compose.yml release/
        cp -r scripts release/
        cp README.md release/
        cp LICENSE release/
        tar -czf release/superai-${{ github.event.release.tag_name }}.tar.gz release/
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./release/superai-${{ github.event.release.tag_name }}.tar.gz
        asset_name: superai-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip